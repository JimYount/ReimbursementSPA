package com.revature.data.oracle;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;

import org.apache.log4j.Logger;

import com.revature.beans.Book;
import com.revature.beans.Genre;
import com.revature.data.GenreDAO;
import com.revature.utils.ConnectionUtil;
import com.revature.utils.LogUtil;

public class GenreOracle implements GenreDAO{
	private static Logger log = Logger.getLogger(GenreOracle.class);
	private static ConnectionUtil cu = ConnectionUtil.getConnectionUtil();
	@Override
	public Integer addGenre(Genre g) {
		// We want to know what the key generated by the db is.
		Integer key = null;
		log.trace("Inserting a genre into the database.");
		Connection conn = cu.getConnection();
		try {
			conn.setAutoCommit(false);
			String sql = "insert into genre(genre) values(?)";
			String[] keys = {"id"};
			PreparedStatement stmt = conn.prepareStatement(sql, keys);
			stmt.setString(1,  g.getGenre());
			int number = stmt.executeUpdate();
			ResultSet rs = stmt.getGeneratedKeys();
			
			if(number!=1) {
				log.warn("Insert failed");
				conn.rollback();
			} else {
				log.trace("Insert succeeded!");
				if(rs.next()) {
					key = rs.getInt(1);
					g.setId(key);
					conn.commit();
				} else {
					log.warn("genre not created");
					conn.rollback();
				}
			}
		} catch(Exception e) {
			LogUtil.logException(e, GenreOracle.class);
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				LogUtil.logException(e, GenreOracle.class);
			}
		}
		return key;
	}

	@Override
	public Genre getGenre(Integer id) {
		log.trace("Attempting to find genre with id = "+id);
		String sql = "select id, genre from genre where id = ?";
		Genre genre = null;
		try(Connection conn = cu.getConnection()) {
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()) {
				log.trace("Found genre: "+rs.getString("genre"));
				genre = new Genre();
				genre.setId(id);
				genre.setGenre(rs.getString("genre"));
			}
		} catch(SQLException e) {
			LogUtil.logException(e, GenreOracle.class);
		}
		log.trace("Returning genre: "+genre);
		return genre;
	}

	@Override
	public Genre getGenreByGenre(String genre) {
		log.trace("Attempting to find genre with genre = "+genre);
		String sql = "select id, genre from genre where genre = ?";
		Genre g = null;
		try(Connection conn = cu.getConnection()) {
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setString(1, genre);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()) {
				log.trace("Found genre: "+rs.getString("genre"));
				g = new Genre();
				g.setId(rs.getInt("id"));
				g.setGenre(rs.getString("genre"));
			}
		} catch(SQLException e) {
			LogUtil.logException(e, GenreOracle.class);
		}
		log.trace("Returning genre: "+genre);
		return g;
	}

	@Override
	public Set<Genre> getGenres() {
		log.trace("Attempting to find genres");
		String sql = "select id, genre from genre";
		Set<Genre> genres = new HashSet<Genre>();
		try(Connection conn = cu.getConnection()) {
			PreparedStatement stmt = conn.prepareStatement(sql);
			ResultSet rs = stmt.executeQuery();
			while(rs.next()) {
				log.trace("Found genre: "+rs.getString("genre"));
				Genre g = new Genre();
				g.setId(rs.getInt("id"));
				g.setGenre(rs.getString("genre"));
				genres.add(g);
			}
		} catch(SQLException e) {
			LogUtil.logException(e, GenreOracle.class);
		}
		log.trace("Returning genres: "+genres);
		return genres;
	}

	@Override
	public void updateGenre(Genre g) {
		log.trace("Updating Genre to "+g);
		Connection conn = cu.getConnection();
		try {
			// JDBC Automatically commits data unless you tell it not to
			conn.setAutoCommit(false);
			String sql = "update genre set genre = ? where id = ?";
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setInt(2, g.getId());
			stmt.setString(1, g.getGenre());
			int rs = stmt.executeUpdate();
			if(rs!= 1) {
				log.warn("Genre Update failed.");
				conn.rollback();
				return;
			}
			log.info("Genre successfully updated");
			conn.commit();
		} catch(SQLException e) {
			LogUtil.rollback(e, conn, GenreOracle.class);
		} finally {
			try {
				conn.close();
			} catch (Exception e) {
				LogUtil.logException(e, GenreOracle.class);
			}
		}
	}

	@Override
	public void deleteGenre(Genre g) {
		log.trace("Deleting Genre "+g);
		Connection conn = cu.getConnection();
		try {
			// JDBC Automatically commits data unless you tell it not to
			conn.setAutoCommit(false);
			String sql = "delete from genre where id = ?";
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setInt(1, g.getId());
			int rs = stmt.executeUpdate();
			if(rs!= 1) {
				log.warn("Genre Deletion failed.");
				conn.rollback();
				return;
			}
			log.info("Genre successfully deleted");
			conn.commit();
		} catch(SQLException e) {
			LogUtil.rollback(e, conn, GenreOracle.class);
		} finally {
			try {
				conn.close();
			} catch (Exception e) {
				LogUtil.logException(e, GenreOracle.class);
			}
		}
	}

	@Override
	public Set<Genre> getGenresByBook(Book b) {
		log.trace("Attempting to find genres by book: "+b);
		Set<Genre> genreSet = new HashSet<Genre>();
		String sql = "select * from genre join book_genre on "
				+"genre.id = book_genre.genre_id where book_id = ?";
		try(Connection conn = cu.getConnection()) {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, b.getId());
			ResultSet rs = pstmt.executeQuery();
			while(rs.next()) {
				Genre g = new Genre();
				g.setId(rs.getInt("Id"));
				g.setGenre(rs.getString("genre"));
				genreSet.add(g);
			}
		} catch(Exception e) {
			LogUtil.logException(e, GenreOracle.class);
		}
		return genreSet;
	}
	
}
